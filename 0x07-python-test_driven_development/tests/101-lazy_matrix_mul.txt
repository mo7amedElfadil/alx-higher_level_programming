The ``101-lazy_lazy_matrix_mul`` module
======================

Using ``lazy_matrix_mul``
-------------------

Importing the function from the module:
	>>> lazy_matrix_mul = __import__("101-lazy_matrix_mul").lazy_matrix_mul

Checking for module docstring:
	>>> mod_doc = __import__("101-lazy_matrix_mul").__doc__
	>>> len(mod_doc) > 2
	True

Checking for function docstring:
	>>> fun_doc = __import__("101-lazy_matrix_mul").lazy_matrix_mul.__doc__
	>>> len(fun_doc) > 2
	True

Checking for wrong input:
Testing no args:
	>>> lazy_matrix_mul()
	Traceback (most recent call last):
		...
	TypeError: lazy_matrix_mul() missing 2 required positional arguments: 'm_a' and 'm_b'

Testing size isn't defined:
	>>> lazy_matrix_mul(m_a, m_b)
	Traceback (most recent call last):
        ...
	NameError: name 'm_a' is not defined

Testing with 2 non lists
    >>> lazy_matrix_mul(1, 2)
    2

Testing with 2  lists that aren't 2D lists
    >>> lazy_matrix_mul([1], [2])
    2

Testing with 2 lists with the second not a 2D lists
	array([2])

Testing when m_a contains a string
    >>> lazy_matrix_mul([["5"]], [[5]])
    Traceback (most recent call last):
        ...
    ValueError: invalid data type for einsum

Testing when m_b contains a string
    >>> lazy_matrix_mul([[5]], [["5"]])
    Traceback (most recent call last):
        ...
    ValueError: invalid data type for einsum

Testing when m_a is a string
    >>> lazy_matrix_mul("5", [[5]])
    Traceback (most recent call last):
        ...
    ValueError: Scalar operands are not allowed, use '*' instead

Testing when m_b is a string
    >>> lazy_matrix_mul([[5]], "5")
    Traceback (most recent call last):
        ...
    numpy.core._exceptions._UFuncNoLoopError: ufunc 'matmul' did not contain a loop with signature matching types (dtype('int64'), dtype('<U1')) -> None

Testing when m_a is empty list
    >>> lazy_matrix_mul([], [[5]])
    Traceback (most recent call last):
        ...
    ValueError: matmul: Input operand 1 has a mismatch in its core dimension 0, with gufunc signature (n?,k),(k,m?)->(n?,m?) (size 1 is different from 0)

Testing when m_a is empty list of lists
    >>> lazy_matrix_mul([[]], [[5]])
    Traceback (most recent call last):
        ...
    ValueError: matmul: Input operand 1 has a mismatch in its core dimension 0, with gufunc signature (n?,k),(k,m?)->(n?,m?) (size 1 is different from 0)

Testing size with m_a containing bool:
	>>> lazy_matrix_mul([[False]], [[5]])
	array([[0]])

Testing with more than 2 arg
    >>> lazy_matrix_mul([[1, 2]], [[3, 4]], [[5, 6]]) 
    Traceback (most recent call last):
        ...
    TypeError: lazy_matrix_mul() takes 2 positional arguments but 3 were given

Testing execution with arguments of incorrect shape
	>>> lazy_matrix_mul([[1, 2], [3, 4]], [[3, 4]])
	Traceback (most recent call last):
        ...
	ValueError: matmul: Input operand 1 has a mismatch in its core dimension 0, with gufunc signature (n?,k),(k,m?)->(n?,m?) (size 1 is different from 2)

Testing when m_a is None
	>>> lazy_matrix_mul(None, [[3, 4]]) 
	Traceback (most recent call last):
		...
	ValueError: matmul: Input operand 0 does not have enough dimensions (has 0, gufunc core with signature (n?,k),(k,m?)->(n?,m?) requires 1)
 
Checking for correct arguments:   
Testing execution with correct arguments
	>>> lazy_matrix_mul([[1, 2], [3, 4]], [[1, 2], [3, 4]])
	array([[ 7, 10],
               [15, 22]])
